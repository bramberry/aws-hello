name: Build Java Maven

env:
  EB_APPLICATION_NAME: "spring-social"
  EB_ENVIRONMENT_NAME: "SpringSocial-env"
  EB_PACKAGE_S3_BUCKET_NAME: "spring-social-versions"
  DEPLOY_PACKAGE_NAME: "spring-social_${{ github.sha }}.zip"
  AWS_REGION_NAME: "us-east-1"
  AWS_ACCOUNT_ID: "121083057015"
  JAR_NAME: "demo-0.0.1-SNAPSHOT.jar"
  TASK_DEFINITION_IMAGE_NAME: "121083057015.dkr.ecr.us-east-1.amazonaws.com/dev:${{ github.sha }}"

on: [push, pull_request]

jobs:
  compile:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8 ]
    name: Java ${{ matrix.java }} compile
    steps:
      - uses: actions/checkout@master
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - run: mvn -f pom.xml clean compile
  build:
    runs-on: ubuntu-latest
    needs: compile
    name: Build Maven project
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Build and test project
        run: mvn -f pom.xml clean verify
      - name: Upload Maven build artifact
        uses: actions/upload-artifact@v1
        with:
          name: target
          path: target/${{ env.JAR_NAME }}
  package:
    runs-on: ubuntu-latest
    needs: build
    name: Build Docker container and deploy to Kubernetes
    steps:
      - uses: actions/checkout@v1
      - name: Download Maven build artifact
        uses: actions/download-artifact@v1
        with:
          name: target
      - uses: kciter/aws-ecr-action@v1
        with:
          access_key_id: ${{ secrets.AWS_USER_ACCESS_KEY }}
          secret_access_key: ${{ secrets.AWS_USER_ACCESS_KEY_SECRET }}
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          repo: dev
          region: ${{ env.AWS_REGION_NAME }}
          tags: latest,${{ github.sha }}

  deploy:
    needs: package
    runs-on: ubuntu-latest
    name: Deploy on AWS
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_USER_ACCESS_KEY_SECRET }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: AWS-Hello
          image: ${{ env.TASK_DEFINITION_IMAGE_NAME }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: Hello
          cluster: MyTest
          wait-for-service-stability: true